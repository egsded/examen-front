{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"mb-3\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"table table-striped col\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[7] || (_cache[7] = _createStaticVNode(\"<nav class=\\\"navbar navbar-expand-lg bg-body-tertiary\\\"><div class=\\\"container-fluid\\\"><a class=\\\"navbar-brand\\\" href=\\\"/\\\">Examen</a><div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarNavAltMarkup\\\"><div class=\\\"navbar-nav\\\"><a class=\\\"nav-link active\\\" aria-current=\\\"page\\\" href=\\\"/\\\">Colonias</a><a class=\\\"nav-link active\\\" href=\\\"/domicilios\\\">Domicilios</a><a class=\\\"nav-link active\\\" href=\\\"/clientes\\\">Clientes</a></div></div></div></nav><div class=\\\"text-center mt-4\\\"><h3>Examen</h3><h1>Colonias</h1></div>\", 2)), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.crearColonia && $options.crearColonia(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"nombre\",\n    class: \"form-label\"\n  }, \"Nombre\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    id: \"nombre\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.colonia.nombre = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.colonia.nombre]])]), _cache[3] || (_cache[3] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn btn-primary\"\n  }, \"Guardar\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]), _cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    class: \"text-center\"\n  }, [_createElementVNode(\"h2\", null, \"Lista de colonias\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    class: \"col\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"table\", _hoisted_4, [_cache[4] || (_cache[4] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"ID\"), _createElementVNode(\"th\", null, \"Nombre\"), _createElementVNode(\"th\", null, \"Acciones\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.colonias, col => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: col.idColonia\n    }, [_createElementVNode(\"td\", null, _toDisplayString(col.idColonia), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(col.nombre), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createElementVNode(\"button\", {\n      class: \"btn btn-info\",\n      onClick: $event => $options.editarColonia(col)\n    }, \"Editar\", 8 /* PROPS */, _hoisted_5), _createElementVNode(\"button\", {\n      class: \"btn btn-danger\",\n      onClick: $event => $options.eliminarColonia(col.idColonia)\n    }, \"Eliminar\", 8 /* PROPS */, _hoisted_6)])]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"col\"\n  }, null, -1 /* HOISTED */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createStaticVNode","_createElementVNode","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","crearColonia","_hoisted_2","for","type","id","$event","$data","colonia","nombre","_hoisted_3","_hoisted_4","_Fragment","_renderList","colonias","col","key","idColonia","_toDisplayString","onClick","editarColonia","_hoisted_5","eliminarColonia","_hoisted_6"],"sources":["C:\\Users\\johnny\\Documents\\GitHub\\examen-front\\src\\components\\ColoniasComponent.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <nav class=\"navbar navbar-expand-lg bg-body-tertiary\">\r\n            <div class=\"container-fluid\">\r\n                <a class=\"navbar-brand\" href=\"/\">Examen</a>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div class=\"navbar-nav\">\r\n                        <a class=\"nav-link active\" aria-current=\"page\" href=\"/\">Colonias</a>\r\n                        <a class=\"nav-link active\" href=\"/domicilios\">Domicilios</a>\r\n                        <a class=\"nav-link active\" href=\"/clientes\">Clientes</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        <div class=\"text-center mt-4\">\r\n            <h3>Examen</h3>\r\n            <h1>Colonias</h1>\r\n        </div>\r\n        <div class=\"container\">\r\n            <form @submit.prevent=\"crearColonia\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"nombre\" class=\"form-label\">Nombre</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"nombre\" v-model=\"colonia.nombre\">\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Guardar</button>\r\n            </form>\r\n        </div>\r\n        <div class=\"text-center\">\r\n            <h2>Lista de colonias</h2>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col\"></div>\r\n            <table class=\"table table-striped col\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Nombre</th>\r\n                        <th>Acciones</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"col in colonias\" :key=\"col.idColonia\">\r\n                        <td>{{ col.idColonia }}</td>\r\n                        <td>{{ col.nombre }}</td>\r\n                        <td>\r\n                            <button class=\"btn btn-info\" @click=\"editarColonia(col)\">Editar</button>\r\n                            <button class=\"btn btn-danger\" @click=\"eliminarColonia(col.idColonia)\">Eliminar</button>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <div class=\"col\"></div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            colonia: {\r\n                nombre: ''\r\n            },\r\n            colonias: [],\r\n            modoEditar: false,\r\n            coloniaSeleccionada: null,\r\n            token: null\r\n        };\r\n    },\r\n    created() {\r\n        this.getToken();\r\n    },\r\n    methods: {\r\n        async getToken() {\r\n            try {\r\n                const data = {\r\n                    \"email\": \"correo@gmail.com\",\r\n                    \"password\": \"12345\"\r\n                }\r\n                const token = await axios.post('/login', data);\r\n                this.token = token.data.token;\r\n                this.getListaColonia();\r\n            } catch (error) {\r\n                console.error('Error al obtener el token: ', error);\r\n            }\r\n        },\r\n        async getListaColonia() {\r\n            try {\r\n                const response = await axios.get('/colonias', {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${this.token}`\r\n                    }\r\n                });\r\n                this.colonias = response.data;\r\n            } catch (error) {\r\n                console.error('Error al cargar las colonias: ', error);\r\n            }\r\n        },\r\n        async crearColonia() {\r\n            try {\r\n                if (this.modoEditar) {\r\n                    await axios.put(`colonia/editar/${this.coloniaSeleccionada}`, this.colonia, {\r\n                        headers: {\r\n                            'Authorization': `Bearer ${this.token}`\r\n                        }\r\n                    })\r\n                } else {\r\n                    await axios.post('/colonia/crear', this.colonia, {\r\n                        headers: {\r\n                            'Authorization': `Bearer ${this.token}`\r\n                        }\r\n                    });\r\n                }\r\n                this.getListaColonia();\r\n                this.resetForm();\r\n            } catch (error) {\r\n                console.error('Error al guardar la colonia: ', error);\r\n            }\r\n        },\r\n        async eliminarColonia(id) {\r\n            try {\r\n                await axios.delete(`/colonia/eliminar/${id}`, {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${this.token}`\r\n                    }\r\n                });\r\n                this.getListaColonia();\r\n            } catch (error) {\r\n                console.erro('Error al eliminar la Colonia: ', error);\r\n            }\r\n        },\r\n        resetForm() {\r\n            this.colonia = {\r\n                nombre: ''\r\n            }\r\n            this.modoEditar = false;\r\n            this.coloniaSeleccionada = null;\r\n        },\r\n        editarColonia(colonia) {\r\n            this.colonia = { ...colonia };\r\n            this.modoEditar = true;\r\n            this.coloniaSeleccionada = colonia.idColonia;\r\n        }\r\n    }\r\n}\r\n</script>"],"mappings":";;EAkBaA,KAAK,EAAC;AAAW;;EAETA,KAAK,EAAC;AAAM;;EAUpBA,KAAK,EAAC;AAAK;;EAELA,KAAK,EAAC;AAAyB;mBAhClD;mBAAA;;uBACIC,mBAAA,CAoDM,c,0BArDVC,kBAAA,ghBAkBQC,mBAAA,CAQM,OARNC,UAQM,GAPFD,mBAAA,CAMO;IANAE,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAnBzBC,cAAA,KAAAC,IAAA,KAmBmCC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MAC/BL,mBAAA,CAGM,OAHNQ,UAGM,G,0BAFFR,mBAAA,CAAqD;IAA9CS,GAAG,EAAC,QAAQ;IAACZ,KAAK,EAAC;KAAa,QAAM,sB,gBAC7CG,mBAAA,CAA6E;IAAtEU,IAAI,EAAC,MAAM;IAACb,KAAK,EAAC,cAAc;IAACc,EAAE,EAAC,QAAQ;IAtBvE,uBAAAR,MAAA,QAAAA,MAAA,MAAAS,MAAA,IAsBiFC,KAAA,CAAAC,OAAO,CAACC,MAAM,GAAAH,MAAA;iDAAdC,KAAA,CAAAC,OAAO,CAACC,MAAM,E,+BAE/Ef,mBAAA,CAA8D;IAAtDU,IAAI,EAAC,QAAQ;IAACb,KAAK,EAAC;KAAkB,SAAO,qB,wDAG7DG,mBAAA,CAEM;IAFDH,KAAK,EAAC;EAAa,IACpBG,mBAAA,CAA0B,YAAtB,mBAAiB,E,sBAEzBA,mBAAA,CAsBM,OAtBNgB,UAsBM,G,0BArBFhB,mBAAA,CAAuB;IAAlBH,KAAK,EAAC;EAAK,6BAChBG,mBAAA,CAkBQ,SAlBRiB,UAkBQ,G,0BAjBJjB,mBAAA,CAMQ,gBALJA,mBAAA,CAIK,aAHDA,mBAAA,CAAW,YAAP,IAAE,GACNA,mBAAA,CAAe,YAAX,QAAM,GACVA,mBAAA,CAAiB,YAAb,UAAQ,E,wBAGpBA,mBAAA,CASQ,iB,kBARJF,mBAAA,CAOKoB,SAAA,QAhDzBC,WAAA,CAyCsCN,KAAA,CAAAO,QAAQ,EAAfC,GAAG;yBAAdvB,mBAAA,CAOK;MAPwBwB,GAAG,EAAED,GAAG,CAACE;QAClCvB,mBAAA,CAA4B,YAAAwB,gBAAA,CAArBH,GAAG,CAACE,SAAS,kBACpBvB,mBAAA,CAAyB,YAAAwB,gBAAA,CAAlBH,GAAG,CAACN,MAAM,kBACjBf,mBAAA,CAGK,aAFDA,mBAAA,CAAwE;MAAhEH,KAAK,EAAC,cAAc;MAAE4B,OAAK,EAAAb,MAAA,IAAEN,QAAA,CAAAoB,aAAa,CAACL,GAAG;OAAG,QAAM,iBA7C3FM,UAAA,GA8C4B3B,mBAAA,CAAwF;MAAhFH,KAAK,EAAC,gBAAgB;MAAE4B,OAAK,EAAAb,MAAA,IAAEN,QAAA,CAAAsB,eAAe,CAACP,GAAG,CAACE,SAAS;OAAG,UAAQ,iBA9C3GM,UAAA,E;gEAmDY7B,mBAAA,CAAuB;IAAlBH,KAAK,EAAC;EAAK,4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}